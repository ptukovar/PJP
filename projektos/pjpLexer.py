# Generated from pjp.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,247,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,
        9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
        1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,173,8,28,
        1,29,4,29,176,8,29,11,29,12,29,177,1,30,4,30,181,8,30,11,30,12,30,
        182,1,30,1,30,4,30,187,8,30,11,30,12,30,188,1,31,1,31,5,31,193,8,
        31,10,31,12,31,196,9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,3,32,209,8,32,1,33,4,33,212,8,33,11,33,12,33,213,
        1,33,1,33,1,34,1,34,1,34,1,34,5,34,222,8,34,10,34,12,34,225,9,34,
        1,34,1,34,1,35,1,35,1,35,1,35,5,35,233,8,35,10,35,12,35,236,9,35,
        1,35,1,35,1,35,1,35,1,35,1,36,4,36,244,8,36,11,36,12,36,245,1,234,
        0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,1,0,5,1,0,48,57,1,0,34,34,3,0,9,10,13,13,32,32,2,
        0,10,10,13,13,3,0,65,90,95,95,97,122,258,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,
        75,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,0,7,81,1,0,0,0,9,83,1,0,0,0,11,
        85,1,0,0,0,13,87,1,0,0,0,15,90,1,0,0,0,17,93,1,0,0,0,19,96,1,0,0,
        0,21,99,1,0,0,0,23,101,1,0,0,0,25,104,1,0,0,0,27,106,1,0,0,0,29,
        109,1,0,0,0,31,111,1,0,0,0,33,113,1,0,0,0,35,115,1,0,0,0,37,117,
        1,0,0,0,39,119,1,0,0,0,41,121,1,0,0,0,43,124,1,0,0,0,45,129,1,0,
        0,0,47,135,1,0,0,0,49,139,1,0,0,0,51,144,1,0,0,0,53,150,1,0,0,0,
        55,152,1,0,0,0,57,172,1,0,0,0,59,175,1,0,0,0,61,180,1,0,0,0,63,190,
        1,0,0,0,65,208,1,0,0,0,67,211,1,0,0,0,69,217,1,0,0,0,71,228,1,0,
        0,0,73,243,1,0,0,0,75,76,5,46,0,0,76,2,1,0,0,0,77,78,5,43,0,0,78,
        4,1,0,0,0,79,80,5,45,0,0,80,6,1,0,0,0,81,82,5,42,0,0,82,8,1,0,0,
        0,83,84,5,47,0,0,84,10,1,0,0,0,85,86,5,37,0,0,86,12,1,0,0,0,87,88,
        5,38,0,0,88,89,5,38,0,0,89,14,1,0,0,0,90,91,5,124,0,0,91,92,5,124,
        0,0,92,16,1,0,0,0,93,94,5,61,0,0,94,95,5,61,0,0,95,18,1,0,0,0,96,
        97,5,33,0,0,97,98,5,61,0,0,98,20,1,0,0,0,99,100,5,60,0,0,100,22,
        1,0,0,0,101,102,5,60,0,0,102,103,5,61,0,0,103,24,1,0,0,0,104,105,
        5,62,0,0,105,26,1,0,0,0,106,107,5,62,0,0,107,108,5,61,0,0,108,28,
        1,0,0,0,109,110,5,33,0,0,110,30,1,0,0,0,111,112,5,40,0,0,112,32,
        1,0,0,0,113,114,5,41,0,0,114,34,1,0,0,0,115,116,5,123,0,0,116,36,
        1,0,0,0,117,118,5,125,0,0,118,38,1,0,0,0,119,120,5,61,0,0,120,40,
        1,0,0,0,121,122,5,105,0,0,122,123,5,102,0,0,123,42,1,0,0,0,124,125,
        5,101,0,0,125,126,5,108,0,0,126,127,5,115,0,0,127,128,5,101,0,0,
        128,44,1,0,0,0,129,130,5,119,0,0,130,131,5,104,0,0,131,132,5,105,
        0,0,132,133,5,108,0,0,133,134,5,101,0,0,134,46,1,0,0,0,135,136,5,
        102,0,0,136,137,5,111,0,0,137,138,5,114,0,0,138,48,1,0,0,0,139,140,
        5,114,0,0,140,141,5,101,0,0,141,142,5,97,0,0,142,143,5,100,0,0,143,
        50,1,0,0,0,144,145,5,119,0,0,145,146,5,114,0,0,146,147,5,105,0,0,
        147,148,5,116,0,0,148,149,5,101,0,0,149,52,1,0,0,0,150,151,5,59,
        0,0,151,54,1,0,0,0,152,153,5,44,0,0,153,56,1,0,0,0,154,155,5,105,
        0,0,155,156,5,110,0,0,156,173,5,116,0,0,157,158,5,102,0,0,158,159,
        5,108,0,0,159,160,5,111,0,0,160,161,5,97,0,0,161,173,5,116,0,0,162,
        163,5,115,0,0,163,164,5,116,0,0,164,165,5,114,0,0,165,166,5,105,
        0,0,166,167,5,110,0,0,167,173,5,103,0,0,168,169,5,98,0,0,169,170,
        5,111,0,0,170,171,5,111,0,0,171,173,5,108,0,0,172,154,1,0,0,0,172,
        157,1,0,0,0,172,162,1,0,0,0,172,168,1,0,0,0,173,58,1,0,0,0,174,176,
        7,0,0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,
        1,0,0,0,178,60,1,0,0,0,179,181,7,0,0,0,180,179,1,0,0,0,181,182,1,
        0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,184,1,0,0,0,184,186,5,
        46,0,0,185,187,7,0,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,
        0,0,0,188,189,1,0,0,0,189,62,1,0,0,0,190,194,5,34,0,0,191,193,8,
        1,0,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,
        0,0,0,195,197,1,0,0,0,196,194,1,0,0,0,197,198,5,34,0,0,198,64,1,
        0,0,0,199,200,5,116,0,0,200,201,5,114,0,0,201,202,5,117,0,0,202,
        209,5,101,0,0,203,204,5,102,0,0,204,205,5,97,0,0,205,206,5,108,0,
        0,206,207,5,115,0,0,207,209,5,101,0,0,208,199,1,0,0,0,208,203,1,
        0,0,0,209,66,1,0,0,0,210,212,7,2,0,0,211,210,1,0,0,0,212,213,1,0,
        0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,6,33,
        0,0,216,68,1,0,0,0,217,218,5,47,0,0,218,219,5,47,0,0,219,223,1,0,
        0,0,220,222,8,3,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,
        0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,227,6,34,
        0,0,227,70,1,0,0,0,228,229,5,47,0,0,229,230,5,42,0,0,230,234,1,0,
        0,0,231,233,9,0,0,0,232,231,1,0,0,0,233,236,1,0,0,0,234,235,1,0,
        0,0,234,232,1,0,0,0,235,237,1,0,0,0,236,234,1,0,0,0,237,238,5,42,
        0,0,238,239,5,47,0,0,239,240,1,0,0,0,240,241,6,35,0,0,241,72,1,0,
        0,0,242,244,7,4,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,
        0,0,245,246,1,0,0,0,246,74,1,0,0,0,11,0,172,177,182,188,194,208,
        213,223,234,245,1,6,0,0
    ]

class pjpLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DOT = 1
    PLUS = 2
    MINUS = 3
    TIMES = 4
    DIVIDE = 5
    MOD = 6
    AND = 7
    OR = 8
    EQ = 9
    NEQ = 10
    LT = 11
    LEQ = 12
    GT = 13
    GEQ = 14
    NOT = 15
    LPAREN = 16
    RPAREN = 17
    LBRACE = 18
    RBRACE = 19
    ASSIGN = 20
    IF = 21
    ELSE = 22
    WHILE = 23
    FOR = 24
    READ = 25
    WRITE = 26
    SEMICOLON = 27
    COMMA = 28
    TYPE = 29
    INTEGER = 30
    FLOAT = 31
    STRING = 32
    BOOLEAN = 33
    WHITESPACE = 34
    COMMENT = 35
    COMMENT_LINE = 36
    VARIABLE = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&&'", "'||'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'!'", "'('", "')'", "'{'", 
            "'}'", "'='", "'if'", "'else'", "'while'", "'for'", "'read'", 
            "'write'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "DOT", "PLUS", "MINUS", "TIMES", "DIVIDE", "MOD", "AND", "OR", 
            "EQ", "NEQ", "LT", "LEQ", "GT", "GEQ", "NOT", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "ASSIGN", "IF", "ELSE", "WHILE", "FOR", 
            "READ", "WRITE", "SEMICOLON", "COMMA", "TYPE", "INTEGER", "FLOAT", 
            "STRING", "BOOLEAN", "WHITESPACE", "COMMENT", "COMMENT_LINE", 
            "VARIABLE" ]

    ruleNames = [ "DOT", "PLUS", "MINUS", "TIMES", "DIVIDE", "MOD", "AND", 
                  "OR", "EQ", "NEQ", "LT", "LEQ", "GT", "GEQ", "NOT", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "ASSIGN", "IF", "ELSE", 
                  "WHILE", "FOR", "READ", "WRITE", "SEMICOLON", "COMMA", 
                  "TYPE", "INTEGER", "FLOAT", "STRING", "BOOLEAN", "WHITESPACE", 
                  "COMMENT", "COMMENT_LINE", "VARIABLE" ]

    grammarFileName = "pjp.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


