# Generated from Expr.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,11,1,11,5,11,136,8,11,10,11,12,11,139,9,
        11,1,12,4,12,142,8,12,11,12,12,12,143,1,13,4,13,147,8,13,11,13,12,
        13,148,1,13,1,13,4,13,153,8,13,11,13,12,13,154,1,14,1,14,5,14,159,
        8,14,10,14,12,14,162,9,14,1,14,1,14,1,15,1,15,3,15,168,8,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,4,35,213,8,35,11,35,12,35,214,1,35,1,35,1,36,1,36,
        1,36,1,36,5,36,223,8,36,10,36,12,36,226,9,36,1,36,1,36,0,0,37,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,1,0,6,2,0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,
        3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,236,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,78,1,0,0,0,5,83,1,0,0,0,7,89,1,
        0,0,0,9,94,1,0,0,0,11,100,1,0,0,0,13,104,1,0,0,0,15,110,1,0,0,0,
        17,115,1,0,0,0,19,122,1,0,0,0,21,127,1,0,0,0,23,133,1,0,0,0,25,141,
        1,0,0,0,27,146,1,0,0,0,29,156,1,0,0,0,31,167,1,0,0,0,33,169,1,0,
        0,0,35,171,1,0,0,0,37,173,1,0,0,0,39,175,1,0,0,0,41,177,1,0,0,0,
        43,179,1,0,0,0,45,181,1,0,0,0,47,183,1,0,0,0,49,185,1,0,0,0,51,188,
        1,0,0,0,53,191,1,0,0,0,55,194,1,0,0,0,57,197,1,0,0,0,59,199,1,0,
        0,0,61,201,1,0,0,0,63,203,1,0,0,0,65,205,1,0,0,0,67,207,1,0,0,0,
        69,209,1,0,0,0,71,212,1,0,0,0,73,218,1,0,0,0,75,76,5,105,0,0,76,
        77,5,102,0,0,77,2,1,0,0,0,78,79,5,101,0,0,79,80,5,108,0,0,80,81,
        5,115,0,0,81,82,5,101,0,0,82,4,1,0,0,0,83,84,5,119,0,0,84,85,5,104,
        0,0,85,86,5,105,0,0,86,87,5,108,0,0,87,88,5,101,0,0,88,6,1,0,0,0,
        89,90,5,114,0,0,90,91,5,101,0,0,91,92,5,97,0,0,92,93,5,100,0,0,93,
        8,1,0,0,0,94,95,5,119,0,0,95,96,5,114,0,0,96,97,5,105,0,0,97,98,
        5,116,0,0,98,99,5,101,0,0,99,10,1,0,0,0,100,101,5,105,0,0,101,102,
        5,110,0,0,102,103,5,116,0,0,103,12,1,0,0,0,104,105,5,102,0,0,105,
        106,5,108,0,0,106,107,5,111,0,0,107,108,5,97,0,0,108,109,5,116,0,
        0,109,14,1,0,0,0,110,111,5,98,0,0,111,112,5,111,0,0,112,113,5,111,
        0,0,113,114,5,108,0,0,114,16,1,0,0,0,115,116,5,115,0,0,116,117,5,
        116,0,0,117,118,5,114,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,
        121,5,103,0,0,121,18,1,0,0,0,122,123,5,116,0,0,123,124,5,114,0,0,
        124,125,5,117,0,0,125,126,5,101,0,0,126,20,1,0,0,0,127,128,5,102,
        0,0,128,129,5,97,0,0,129,130,5,108,0,0,130,131,5,115,0,0,131,132,
        5,101,0,0,132,22,1,0,0,0,133,137,7,0,0,0,134,136,7,1,0,0,135,134,
        1,0,0,0,136,139,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,24,1,
        0,0,0,139,137,1,0,0,0,140,142,7,2,0,0,141,140,1,0,0,0,142,143,1,
        0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,26,1,0,0,0,145,147,7,2,
        0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,
        0,0,149,150,1,0,0,0,150,152,5,46,0,0,151,153,7,2,0,0,152,151,1,0,
        0,0,153,154,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,28,1,0,0,
        0,156,160,5,34,0,0,157,159,8,3,0,0,158,157,1,0,0,0,159,162,1,0,0,
        0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,
        0,163,164,5,34,0,0,164,30,1,0,0,0,165,168,3,19,9,0,166,168,3,21,
        10,0,167,165,1,0,0,0,167,166,1,0,0,0,168,32,1,0,0,0,169,170,5,43,
        0,0,170,34,1,0,0,0,171,172,5,45,0,0,172,36,1,0,0,0,173,174,5,42,
        0,0,174,38,1,0,0,0,175,176,5,47,0,0,176,40,1,0,0,0,177,178,5,37,
        0,0,178,42,1,0,0,0,179,180,5,46,0,0,180,44,1,0,0,0,181,182,5,62,
        0,0,182,46,1,0,0,0,183,184,5,60,0,0,184,48,1,0,0,0,185,186,5,61,
        0,0,186,187,5,61,0,0,187,50,1,0,0,0,188,189,5,33,0,0,189,190,5,61,
        0,0,190,52,1,0,0,0,191,192,5,38,0,0,192,193,5,38,0,0,193,54,1,0,
        0,0,194,195,5,124,0,0,195,196,5,124,0,0,196,56,1,0,0,0,197,198,5,
        33,0,0,198,58,1,0,0,0,199,200,5,59,0,0,200,60,1,0,0,0,201,202,5,
        44,0,0,202,62,1,0,0,0,203,204,5,40,0,0,204,64,1,0,0,0,205,206,5,
        41,0,0,206,66,1,0,0,0,207,208,5,123,0,0,208,68,1,0,0,0,209,210,5,
        125,0,0,210,70,1,0,0,0,211,213,7,4,0,0,212,211,1,0,0,0,213,214,1,
        0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,6,
        35,0,0,217,72,1,0,0,0,218,219,5,47,0,0,219,220,5,47,0,0,220,224,
        1,0,0,0,221,223,8,5,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,
        1,0,0,0,224,225,1,0,0,0,225,227,1,0,0,0,226,224,1,0,0,0,227,228,
        6,36,0,0,228,74,1,0,0,0,9,0,137,143,148,154,160,167,214,224,1,6,
        0,0
    ]

class CustomLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    ELSE = 2
    WHILE = 3
    READ = 4
    WRITE = 5
    INT = 6
    FLOAT = 7
    BOOL = 8
    STRING = 9
    TRUE = 10
    FALSE = 11
    ID = 12
    INT_LITERAL = 13
    FLOAT_LITERAL = 14
    STRING_LITERAL = 15
    BOOLEAN_LITERAL = 16
    PLUS = 17
    MINUS = 18
    MULTIPLY = 19
    DIVIDE = 20
    MODULO = 21
    CONCAT = 22
    GREATER_THAN = 23
    LESS_THAN = 24
    EQUALS = 25
    NOT_EQUALS = 26
    AND = 27
    OR = 28
    NOT = 29
    SEMICOLON = 30
    COMMA = 31
    LPAREN = 32
    RPAREN = 33
    LBRACE = 34
    RBRACE = 35
    WS = 36
    COMMENT = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'while'", "'read'", "'write'", "'int'", "'float'", 
            "'bool'", "'string'", "'true'", "'false'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'.'", "'>'", "'<'", "'=='", "'!='", "'&&'", "'||'", 
            "'!'", "';'", "','", "'('", "')'", "'{'", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "ELSE", "WHILE", "READ", "WRITE", "INT", "FLOAT", "BOOL", 
            "STRING", "TRUE", "FALSE", "ID", "INT_LITERAL", "FLOAT_LITERAL", 
            "STRING_LITERAL", "BOOLEAN_LITERAL", "PLUS", "MINUS", "MULTIPLY", 
            "DIVIDE", "MODULO", "CONCAT", "GREATER_THAN", "LESS_THAN", "EQUALS", 
            "NOT_EQUALS", "AND", "OR", "NOT", "SEMICOLON", "COMMA", "LPAREN", 
            "RPAREN", "LBRACE", "RBRACE", "WS", "COMMENT" ]

    ruleNames = [ "IF", "ELSE", "WHILE", "READ", "WRITE", "INT", "FLOAT", 
                  "BOOL", "STRING", "TRUE", "FALSE", "ID", "INT_LITERAL", 
                  "FLOAT_LITERAL", "STRING_LITERAL", "BOOLEAN_LITERAL", 
                  "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "CONCAT", 
                  "GREATER_THAN", "LESS_THAN", "EQUALS", "NOT_EQUALS", "AND", 
                  "OR", "NOT", "SEMICOLON", "COMMA", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "WS", "COMMENT" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


